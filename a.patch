 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/Home.jsx b/src/Home.jsx
index f88256e9b49b210e22ef3d5755b0001f659e1ecd..b97bfcf953a9251f8e0441215c979076b168a646 100644
--- a/src/Home.jsx
+++ b/src/Home.jsx
@@ -1,33 +1,34 @@
 // START OF FILE frontend/src/Home.jsx (수정: 종목 데이터 Firebase 연동 및 종목 코드 제거)
 
 import { useCallback, useEffect, useMemo, useRef, useState } from "react";
 import { useLocation, Link } from "react-router-dom";
 import { Helmet } from "react-helmet";
 import useSnapshotsHistory from "./hooks/useSnapshotsHistory";
 import useThemeLeaders from "./hooks/useThemeLeaders";
 import useLatestStockPrices from "./hooks/useLatestStockPrices";
+import { formatPriceTimestamp, formatPriceValue } from "./lib/stockPriceUtils";
 
 // Firebase imports
 import { db } from './firebaseConfig';
 import {
   addDoc,
   collection,
   doc,
   getDoc,
   getDocs,
   limit,
   orderBy,
   query,
   serverTimestamp,
   setDoc,
 } from 'firebase/firestore';
 import { buildSnapshotSignature } from "./lib/snapshotUtils";
 import PublicWatchlistShowcase from "./components/PublicWatchlistShowcase";
 import usePublicWatchlist from "./hooks/usePublicWatchlist";
 import useAuth from "./useAuth";
 
 export default function Home() {
   const location = useLocation();
 
   // 최신 블로그 글 관련 상태
   const [latestBlogPosts, setLatestBlogPosts] = useState([]);
@@ -1288,56 +1289,81 @@ export default function Home() {
                     <li className="rounded-lg border border-dashed border-red-500/40 px-3 py-4 text-center text-red-300">
                       {watchlistError}
                     </li>
                   ) : publicWatchlist.length > 0 ? (
                     publicWatchlist.slice(0, 5).map((item) => {
                       const hasSupportLines = Array.isArray(item.supportLines) && item.supportLines.length > 0;
                       const supportText = hasSupportLines
                         ? item.supportLines.map((value) => `${watchlistNumberFormatter.format(value)}원`).join(', ')
                         : '지지선 미입력';
                       const hasResistanceLines = Array.isArray(item.resistanceLines) && item.resistanceLines.length > 0;
                       const resistanceText = hasResistanceLines
                         ? item.resistanceLines.map((value) => `${watchlistNumberFormatter.format(value)}원`).join(', ')
                         : null;
                       const shouldMaskAllValues = !isLoggedIn;
                       const shouldMaskPremiumValues = isLoggedIn && !isMember;
                       const shouldMaskSupport = (shouldMaskAllValues || shouldMaskPremiumValues) && hasSupportLines;
                       const shouldMaskResistance = (shouldMaskAllValues || shouldMaskPremiumValues) && hasResistanceLines;
                       const hasMaskedValues = shouldMaskSupport || shouldMaskResistance;
                       const maskNoticeMessage = shouldMaskAllValues
                         ? '관심 종목 상세 정보는 구글 로그인 후 확인 가능합니다.'
                         : '관심 종목 상세 정보는 관리자 문의 후 확인 가능합니다.';
                       const hasMemo = Boolean(item.memo);
                       const memoIsVisible = hasMemo && isMember;
                       const shouldShowMemoMaskForGuest = hasMemo && isLoggedIn && !isMember;
                       const shouldShowMemoMaskForVisitors = hasMemo && shouldMaskAllValues;
+                      const tickerKey = (item.ticker ?? '').trim().toUpperCase();
+                      const priceInfo =
+                        tickerKey && publicWatchlistPriceMap instanceof Map
+                          ? publicWatchlistPriceMap.get(tickerKey) ?? null
+                          : null;
+                      const formattedPrice = priceInfo ? formatPriceValue(priceInfo.price) : null;
+                      const priceDisplayText = priceInfo && formattedPrice
+                        ? formattedPrice
+                        : publicWatchlistPriceLoading
+                        ? '가격 불러오는 중...'
+                        : publicWatchlistPriceError
+                        ? '가격 정보를 불러오지 못했습니다.'
+                        : '가격 정보 없음';
+                      const priceTimestampText = priceInfo?.priceDate
+                        ? formatPriceTimestamp(priceInfo.priceDate)
+                        : null;
                       return (
                         <li key={item.id} className="flex flex-col gap-1 rounded-lg border border-white/5 bg-white/5 px-3 py-2">
                           <div className="flex items-center justify-between gap-3">
                             <span className="font-semibold text-white">{item.name}</span>
                             <span className="text-xs text-amber-200">{item.ticker}</span>
                           </div>
+                          <p className="text-xs text-amber-100">
+                            현재가: {priceDisplayText}
+                            {priceTimestampText && (
+                              <span className="ml-2 text-[11px] text-amber-200/80">기준: {priceTimestampText}</span>
+                            )}
+                          </p>
+                          {!priceInfo && publicWatchlistPriceError && !publicWatchlistPriceLoading && (
+                            <p className="text-[11px] text-red-200/80">{publicWatchlistPriceError}</p>
+                          )}
                           <p className="text-xs text-amber-100">지지선: {shouldMaskSupport ? '●●●' : supportText}</p>
                           {resistanceText && (
                             <p className="text-xs text-amber-100">저항선: {shouldMaskResistance ? '●●●' : resistanceText}</p>
                           )}
                           {hasMaskedValues && (
                             <p className="text-xs text-amber-200">{maskNoticeMessage}</p>
                           )}
                           {memoIsVisible && <p className="text-xs text-amber-200">메모: {item.memo}</p>}
                           {shouldShowMemoMaskForVisitors && (
                             <p className="text-xs text-amber-200">메모는 구글 로그인 후 확인 가능합니다.</p>
                           )}
                           {shouldShowMemoMaskForGuest && (
                             <p className="text-xs text-amber-200">메모는 관리자 문의 후 확인 가능합니다.</p>
                           )}
                         </li>
                       );
                     })
                   ) : (
                     <li className="rounded-lg border border-dashed border-amber-500/40 px-3 py-4 text-center text-slate-300">
                       아직 공개된 관심 종목이 없습니다. 관리자 등록 후 이 영역에서 바로 확인할 수 있습니다.
                     </li>
                   )}
                 </ul>
                 <Link
                   to="/portfolio"
diff --git a/src/PortfolioPage.jsx b/src/PortfolioPage.jsx
index df6459c1eec62f247bb0ea3437600ab70a84cdd0..f32def01af1377e5149386135e1cf9b78c49e6ea 100644
--- a/src/PortfolioPage.jsx
+++ b/src/PortfolioPage.jsx
@@ -1,33 +1,36 @@
 import { Suspense, lazy, useEffect, useMemo, useRef, useState } from "react";
 import { Helmet } from "react-helmet";
 import { collection, doc, getDoc, serverTimestamp, setDoc } from "firebase/firestore";
 import usePortfolioData from "./hooks/usePortfolioData";
 import { db } from "./firebaseConfig";
 import useAuth from "./useAuth";
 import useStockPrices from "./hooks/useStockPrices";
+import useLatestStockPrices from "./hooks/useLatestStockPrices";
 import { isLegFilled, resolveLegPrice } from "./lib/legUtils";
+import { formatPriceLines } from "./lib/watchlistUtils";
+import { formatPriceTimestamp, formatPriceValue } from "./lib/stockPriceUtils";
 
 const CHART_INITIAL_DAYS = 100;
 
 const CandlestickChart = lazy(() => import("./components/CandlestickChart"));
 
 const normaliseDateValue = (value) => {
   if (!value) {
     return null;
   }
 
   if (value instanceof Date) {
     return Number.isNaN(value.getTime()) ? null : value;
   }
 
   if (typeof value?.toDate === "function") {
     try {
       const converted = value.toDate();
       return converted instanceof Date && !Number.isNaN(converted.getTime())
         ? converted
         : null;
     } catch (error) {
       return null;
     }
   }
 
@@ -76,69 +79,94 @@ const resolveDateKey = (item) => {
   ];
 
   for (const candidate of dateCandidates) {
     const normalised = normaliseDateValue(candidate);
     if (normalised) {
       return normalised.toISOString().slice(0, 10);
     }
   }
 
   return null;
 };
 
 function ProgressBar({ value }) {
   const percentage = Math.max(0, Math.min(100, Math.round((value ?? 0) * 100)));
 
   return (
     <div className="w-full bg-gray-700 h-2 rounded">
       <div
         className="bg-teal-400 h-2 rounded transition-all duration-300"
         style={{ width: `${percentage}%` }}
       />
     </div>
   );
 }
 
-function StockRow({ stock, onSelect }) {
+function StockRow({ stock, onSelect, priceInfo, priceLoading, priceError }) {
   const statusColor =
     stock.status === "완료"
       ? "text-emerald-400"
       : stock.status === "진행중"
       ? "text-yellow-400"
       : "text-gray-300";
 
+  const supportText = formatPriceLines(stock.supportLines) ?? "-";
+  const resistanceText = formatPriceLines(stock.resistanceLines) ?? "-";
+  const formattedPrice = priceInfo ? formatPriceValue(priceInfo.price) : null;
+  const priceDisplayText = priceInfo && formattedPrice
+    ? formattedPrice
+    : priceLoading
+    ? "불러오는 중..."
+    : priceError
+    ? "가격 정보를 불러오지 못했습니다."
+    : "-";
+  const priceTimestampText = priceInfo?.priceDate ? formatPriceTimestamp(priceInfo.priceDate) : null;
+
   return (
     <tr
       className="border-b border-gray-700 hover:bg-gray-800 cursor-pointer"
       onClick={() => onSelect(stock)}
     >
       <td className="px-4 py-3 font-semibold text-white">{stock.ticker}</td>
       <td className="px-4 py-3">{stock.name}</td>
       <td className={`px-4 py-3 ${statusColor}`}>{stock.status ?? "-"}</td>
       <td className="px-4 py-3">
         <ProgressBar value={stock.totalProgress} />
       </td>
+      <td className="px-4 py-3 text-right">
+        <div className="flex flex-col items-end gap-1">
+          <span className="font-semibold text-white">{priceDisplayText}</span>
+          {priceTimestampText && (
+            <span className="text-[11px] text-gray-400">기준: {priceTimestampText}</span>
+          )}
+          {!priceInfo && priceError && !priceLoading && (
+            <span className="text-[11px] text-red-300">{priceError}</span>
+          )}
+        </div>
+      </td>
+      <td className="px-4 py-3 text-xs text-gray-300">{supportText}</td>
+      <td className="px-4 py-3 text-xs text-gray-300">{resistanceText}</td>
       <td className="px-4 py-3 text-right">
         {typeof stock.aggregatedReturn === "number"
           ? `${stock.aggregatedReturn.toFixed(2)}%`
           : "-"}
       </td>
     </tr>
   );
 }
 
 function MemberNoteForm({ stock }) {
   const { user, signIn } = useAuth();
   const [form, setForm] = useState({ buyPrice: "", quantity: "", memo: "" });
   const [saving, setSaving] = useState(false);
 
   useEffect(() => {
     if (stock?.memberNote) {
       setForm({
         buyPrice: stock.memberNote.buyPrice ?? "",
         quantity: stock.memberNote.quantity ?? "",
         memo: stock.memberNote.memo ?? "",
       });
     } else {
       setForm({ buyPrice: "", quantity: "", memo: "" });
     }
   }, [stock]);
@@ -231,50 +259,62 @@ function MemberNoteForm({ stock }) {
         </label>
         <textarea
           id="memo"
           rows={3}
           value={form.memo}
           onChange={(event) =>
             setForm((prev) => ({ ...prev, memo: event.target.value }))
           }
           className="w-full rounded bg-gray-900 border border-gray-700 px-3 py-2 text-white"
           placeholder="내 전략이나 체크하고 싶은 내용을 입력하세요."
         />
       </div>
       <button
         type="submit"
         disabled={saving}
         className="w-full bg-teal-500 hover:bg-teal-400 disabled:opacity-60 text-white font-semibold py-2 rounded"
       >
         {saving ? "저장 중..." : "나의 매매 기록 저장"}
       </button>
     </form>
   );
 }
 
 export default function PortfolioPage() {
   const { loading, stocks } = usePortfolioData();
+  const portfolioTickers = useMemo(
+    () =>
+      stocks
+        .map((stock) => (stock.ticker ?? "").trim().toUpperCase())
+        .filter((ticker) => ticker.length > 0),
+    [stocks]
+  );
+  const {
+    priceMap: portfolioPriceMap,
+    loading: portfolioPriceLoading,
+    error: portfolioPriceError,
+  } = useLatestStockPrices(portfolioTickers);
   const [selectedStock, setSelectedStock] = useState(null);
   const [statusFilter, setStatusFilter] = useState("전체");
   const [activePriceTicker, setActivePriceTicker] = useState(null);
   const [tickerLookupPending, setTickerLookupPending] = useState(false);
   const [isChartModalOpen, setChartModalOpen] = useState(false);
   const bodyOverflowRef = useRef("");
   const priceStatusCacheRef = useRef({});
 
   const tickerCandidates = useMemo(() => {
     if (!selectedStock) {
       return [];
     }
 
     const rawValues = [
       selectedStock.ticker,
       selectedStock.code,
       selectedStock.symbol,
       selectedStock.id,
       selectedStock.altTicker,
       selectedStock?.priceHistoryTicker,
       ...(Array.isArray(selectedStock?.tickerCandidates)
         ? selectedStock.tickerCandidates
         : []),
     ];
 
@@ -1244,85 +1284,102 @@ useEffect(() => {
                 return (
                   <button
                     key={option}
                     type="button"
                     onClick={() => setStatusFilter(option)}
                     className={`rounded-full px-3 py-1 text-xs font-medium transition ${
                       isActive
                         ? "bg-teal-500 text-white shadow"
                         : "bg-gray-900 text-gray-300 hover:bg-gray-700"
                     }`}
                   >
                     {option}
                   </button>
                 );
               })}
             </div>
           </div>
           <div className="overflow-x-auto">
             <table className="min-w-full text-left text-sm">
               <thead className="bg-gray-700 text-gray-300 uppercase">
                 <tr>
                   <th className="px-4 py-3">종목코드</th>
                   <th className="px-4 py-3">종목명</th>
                   <th className="px-4 py-3">상태</th>
                   <th className="px-4 py-3">진행률</th>
+                  <th className="px-4 py-3 text-right">현재가</th>
+                  <th className="px-4 py-3">지지선</th>
+                  <th className="px-4 py-3">저항선</th>
                   <th className="px-4 py-3 text-right">총 수익률</th>
                 </tr>
               </thead>
               <tbody>
                 {loading && (
                   <tr>
-                    <td colSpan={5} className="px-4 py-6 text-center text-gray-400">
+                    <td colSpan={8} className="px-4 py-6 text-center text-gray-400">
                       데이터를 불러오는 중입니다...
                     </td>
                   </tr>
                 )}
                 {!loading && !stocks.length && (
                   <tr>
-                    <td colSpan={5} className="px-4 py-6 text-center text-gray-400">
+                    <td colSpan={8} className="px-4 py-6 text-center text-gray-400">
                       아직 등록된 포트폴리오가 없습니다.
                     </td>
                   </tr>
                 )}
                 {!loading && stocks.length > 0 && !filteredStocks.length && (
                   <tr>
-                    <td colSpan={5} className="px-4 py-6 text-center text-gray-400">
+                    <td colSpan={8} className="px-4 py-6 text-center text-gray-400">
                       선택한 상태에 해당하는 종목이 없습니다.
                     </td>
                   </tr>
                 )}
                 {!loading &&
-                  filteredStocks.map((stock) => (
-                    <StockRow
-                      key={stock.id}
-                      stock={stock}
-                      onSelect={setSelectedStock}
-                    />
-                  ))}
+                  filteredStocks.map((stock) => {
+                    const tickerKey = (stock.ticker ?? "").trim().toUpperCase();
+                    const priceInfo =
+                      tickerKey && portfolioPriceMap instanceof Map
+                        ? portfolioPriceMap.get(tickerKey) ?? null
+                        : null;
+
+                    return (
+                      <StockRow
+                        key={stock.id}
+                        stock={stock}
+                        onSelect={setSelectedStock}
+                        priceInfo={priceInfo}
+                        priceLoading={portfolioPriceLoading}
+                        priceError={portfolioPriceError}
+                      />
+                    );
+                  })}
               </tbody>
             </table>
+            {portfolioPriceError && !portfolioPriceLoading && (
+              <p className="px-4 pb-4 text-xs text-red-300">{portfolioPriceError}</p>
+            )}
           </div>
         </section>
 
         {selectedStock && (
           <section className="grid gap-6 lg:grid-cols-[2fr,1fr]">
             <div className="bg-gray-800 rounded-xl p-6 space-y-4">
               <div className="flex justify-between items-center">
                 <div>
                   <h2 className="text-xl font-semibold text-white">
                     {selectedStock.name} ({selectedStock.ticker})
                   </h2>
                   <p className="text-sm text-gray-400">
                     목표 비중 {(Number(selectedStock.targetWeight) || 0).toFixed(1)}%
                   </p>
                 </div>
                 <button
                   type="button"
                   onClick={() => setSelectedStock(null)}
                   className="text-sm text-gray-400 hover:text-gray-200"
                 >
                   닫기
                 </button>
               </div>
 
 
diff --git a/src/hooks/useStockPrices.js b/src/hooks/useStockPrices.js
index 52a93912a07742292d8e7c4af49c3891827d4349..4e47debf38853d9f5cc6e1131da6f300c96bb9c5 100644
--- a/src/hooks/useStockPrices.js
+++ b/src/hooks/useStockPrices.js
@@ -31,60 +31,60 @@ export default function useStockPrices(ticker, options = {}) {
 
     const applySnapshot = (snapshot) => {
       if (!snapshot.exists()) {
         console.log(`${ticker} 문서가 존재하지 않습니다`);
         setPrices([]);
         return;
       }
 
       const data = snapshot.data();
       console.log(`${ticker} 문서 데이터:`, data ? Object.keys(data) : 'null');
       
       const allPrices = Array.isArray(data?.prices) ? data.prices : [];
       console.log(`전체 가격 데이터: ${allPrices.length}개`);
       
       // days가 0이거나 음수면 전체 데이터, 아니면 최근 N일
       const limited = days > 0 ? allPrices.slice(-days) : allPrices;
       console.log(`제한된 가격 데이터: ${limited.length}개 (days=${days})`);
 
       const parseDateValue = (value) => {
         if (!value) return Number.NEGATIVE_INFINITY;
         const timeValue = new Date(value).getTime();
         return Number.isFinite(timeValue) ? timeValue : Number.NEGATIVE_INFINITY;
       };
 
       const sortedByDate = [...limited].sort((a, b) => {
-        const timeDiff = parseDateValue(a?.date) - parseDateValue(b?.date);
+        const timeDiff = parseDateValue(b?.date) - parseDateValue(a?.date);
 
         if (timeDiff !== 0) {
           return timeDiff;
         }
 
         const aDateText = a?.date ?? "";
         const bDateText = b?.date ?? "";
 
-        return String(aDateText).localeCompare(String(bDateText));
+        return String(bDateText).localeCompare(String(aDateText));
       });
 
       console.log(`정렬 후 최종 데이터: ${sortedByDate.length}개`);
       setPrices(sortedByDate);
     };
 
     if (realtime) {
       const unsubscribe = onSnapshot(
         docRef,
         (snapshot) => {
           applySnapshot(snapshot);
           setLoading(false);
         },
         (snapshotError) => {
           console.error("주가 데이터를 실시간으로 불러오지 못했습니다.", snapshotError);
           setError(snapshotError);
           setPrices([]);
           setLoading(false);
         }
       );
 
       return () => unsubscribe();
     }
 
     let isCancelled = false;
diff --git a/src/hooks/useThemeLeadersHistory.js b/src/hooks/useThemeLeadersHistory.js
index 7bcb399cff8e3716e893d5af0db2da9187c0380d..864f27d39aa8fe4177060ffa685a95dbf60ee5d8 100644
--- a/src/hooks/useThemeLeadersHistory.js
+++ b/src/hooks/useThemeLeadersHistory.js
@@ -1,45 +1,54 @@
 import { useMemo } from "react";
 import useSnapshotsHistory from "./useSnapshotsHistory";
 import {
   buildThemeRankTimeSeries,
   buildThemeTrendHighlights,
 } from "../lib/themeAnalytics";
 
 const COLLECTION_NAME = "themeLeadersSnapshots";
 const DEFAULT_LIMIT_DAYS = 30;
 const DEFAULT_TOP_COUNT = 10;
 const DEFAULT_CHART_COUNT = 5;
 
 export default function useThemeLeadersHistory({
-  limitCount = DEFAULT_LIMIT_DAYS,
+  limitCount: providedLimitCount,
   topCount = DEFAULT_TOP_COUNT,
   chartCount = DEFAULT_CHART_COUNT,
 } = {}) {
+  const effectiveLimitCount =
+    providedLimitCount === null
+      ? undefined
+      : typeof providedLimitCount === "number" &&
+        Number.isInteger(providedLimitCount) &&
+        providedLimitCount > 0
+      ? providedLimitCount
+      : DEFAULT_LIMIT_DAYS;
+
   const historyState = useSnapshotsHistory({
     collectionName: COLLECTION_NAME,
-    limitCount,
+    limitCount: effectiveLimitCount,
   });
 
   const { groupedSnapshots } = historyState;
 
   const rankSeries = useMemo(() => {
     return buildThemeRankTimeSeries({ groupedSnapshots, topCount });
   }, [groupedSnapshots, topCount]);
 
   const chartSeries = useMemo(() => {
     if (!Array.isArray(rankSeries)) {
       return [];
     }
 
     return rankSeries.slice(0, chartCount);
   }, [chartCount, rankSeries]);
 
   const highlights = useMemo(() => {
     return buildThemeTrendHighlights(rankSeries);
   }, [rankSeries]);
 
   return {
     ...historyState,
     rankSeries,
     chartSeries,
     highlights,
diff --git a/src/lib/stockPriceUtils.js b/src/lib/stockPriceUtils.js
index 69fbd1e5df29a335f868b57bee3ed7be3b652642..60cdec7f05df63177f58bd352ac07914c6b8a859 100644
--- a/src/lib/stockPriceUtils.js
+++ b/src/lib/stockPriceUtils.js
@@ -1,76 +1,158 @@
 const currencyFormatter = new Intl.NumberFormat("ko-KR");
 
 export const STOCK_PRICE_COLLECTION = "stock_prices";
 
 function toNumeric(value) {
   if (value === null || value === undefined) {
     return null;
   }
 
   const numeric = Number(value);
   return Number.isFinite(numeric) ? numeric : null;
 }
 
 export function extractLatestPriceSnapshot(data) {
   if (!data || typeof data !== "object") {
     return null;
   }
 
+  const parseDateValue = (value) => {
+    if (!value) {
+      return null;
+    }
+
+    if (typeof value?.toDate === "function") {
+      try {
+        const converted = value.toDate();
+        if (converted instanceof Date && !Number.isNaN(converted.getTime())) {
+          return converted;
+        }
+      } catch (error) {
+        console.warn("가격 스냅샷 날짜 변환 실패", error);
+      }
+    }
+
+    if (value instanceof Date) {
+      return Number.isNaN(value.getTime()) ? null : value;
+    }
+
+    if (typeof value === "number") {
+      const numericDate = new Date(value);
+      return Number.isNaN(numericDate.getTime()) ? null : numericDate;
+    }
+
+    if (typeof value === "string") {
+      const trimmed = value.trim();
+      if (!trimmed) {
+        return null;
+      }
+
+      if (/^\d{8}$/.test(trimmed)) {
+        const year = trimmed.slice(0, 4);
+        const month = trimmed.slice(4, 6);
+        const day = trimmed.slice(6, 8);
+        const date = new Date(`${year}-${month}-${day}T00:00:00`);
+        if (!Number.isNaN(date.getTime())) {
+          return date;
+        }
+      }
+
+      const parsed = new Date(trimmed);
+      return Number.isNaN(parsed.getTime()) ? null : parsed;
+    }
+
+    return null;
+  };
+
   const directFields = [
     { price: data.currentPrice, date: data.priceDate ?? data.updatedAt ?? null },
     { price: data.price, date: data.priceDate ?? data.updatedAt ?? null },
     { price: data.close, date: data.priceDate ?? data.updatedAt ?? null },
     { price: data.lastPrice, date: data.priceDate ?? data.updatedAt ?? null },
   ];
 
   for (const candidate of directFields) {
     const numeric = toNumeric(candidate.price);
     if (numeric !== null) {
       return { price: numeric, priceDate: candidate.date ?? null };
     }
   }
 
   const prices = Array.isArray(data.prices) ? data.prices : [];
   if (!prices.length) {
     return null;
   }
 
-  const latestEntry = prices[0];
-  const priceDateCandidate =
-    latestEntry?.date ?? latestEntry?.tradeDate ?? latestEntry?.timestamp ?? null;
+  let latestSnapshot = null;
+  let latestTimestamp = Number.NEGATIVE_INFINITY;
+  let fallbackSnapshot = null;
+  let fallbackIndex = -1;
 
-  const entryFields = [latestEntry?.close, latestEntry?.endPrice, latestEntry?.price];
+  prices.forEach((entry, index) => {
+    if (!entry || typeof entry !== "object") {
+      return;
+    }
 
-  for (const value of entryFields) {
-    const numeric = toNumeric(value);
-    if (numeric !== null) {
-      return { price: numeric, priceDate: priceDateCandidate };
+    const candidatePrice =
+      toNumeric(entry.close) ??
+      toNumeric(entry.endPrice) ??
+      toNumeric(entry.price) ??
+      toNumeric(entry.lastPrice) ??
+      toNumeric(entry.currentPrice);
+
+    if (candidatePrice === null) {
+      return;
     }
-  }
 
-  return null;
+    const rawDate =
+      entry.date ??
+      entry.dateValue ??
+      entry.tradeDate ??
+      entry.timestamp ??
+      entry.tradingDate ??
+      entry.datetime ??
+      entry.time ??
+      null;
+    const parsedDate = parseDateValue(rawDate);
+
+    if (parsedDate) {
+      const timeValue = parsedDate.getTime();
+      if (timeValue > latestTimestamp) {
+        latestTimestamp = timeValue;
+        latestSnapshot = { price: candidatePrice, priceDate: rawDate ?? null };
+      }
+      return;
+    }
+
+    if (index >= fallbackIndex) {
+      fallbackIndex = index;
+      fallbackSnapshot = { price: candidatePrice, priceDate: rawDate ?? null };
+    }
+  });
+
+  return latestSnapshot ?? fallbackSnapshot;
 }
 
 export function normaliseDateValue(value) {
   if (!value) {
     return null;
   }
 
   if (typeof value?.toDate === "function") {
     try {
       const date = value.toDate();
       if (date instanceof Date && !Number.isNaN(date.getTime())) {
         return date;
       }
     } catch (error) {
       console.warn("타임스탬프 변환 실패", error);
     }
   }
 
   if (value instanceof Date) {
     return Number.isNaN(value.getTime()) ? null : value;
   }
 
   if (typeof value === "number") {
     const date = new Date(value);
     return Number.isNaN(date.getTime()) ? null : date;
diff --git a/src/pages/PublicWatchlistPage.jsx b/src/pages/PublicWatchlistPage.jsx
index a0335aaa03f355adc36f326abfe83541c3cd33ef..ba0f94310a8c48b6f536ef9b70d734ca9970b781 100644
--- a/src/pages/PublicWatchlistPage.jsx
+++ b/src/pages/PublicWatchlistPage.jsx
@@ -1,122 +1,162 @@
 import { useMemo } from "react";
 import { Helmet } from "react-helmet";
 import { Link } from "react-router-dom";
 import usePublicWatchlist from "../hooks/usePublicWatchlist";
 import { formatPriceLines, formatTimestamp } from "../lib/watchlistUtils";
+import useLatestStockPrices from "../hooks/useLatestStockPrices";
+import { formatPriceTimestamp, formatPriceValue } from "../lib/stockPriceUtils";
 
 export default function PublicWatchlistPage() {
   const {
     items: watchlistItems,
     loading,
     error,
     meta,
   } = usePublicWatchlist();
 
   const stats = useMemo(() => {
     const total = watchlistItems.length;
     const alertsEnabled = watchlistItems.filter((item) => item.alertEnabled !== false).length;
     const portfolioReady = watchlistItems.filter((item) => item.portfolioReady).length;
 
     return {
       total,
       alertsEnabled,
       portfolioReady,
     };
   }, [watchlistItems]);
 
+  const watchlistTickers = useMemo(
+    () =>
+      watchlistItems
+        .map((item) => (item.ticker ?? "").trim().toUpperCase())
+        .filter((ticker) => ticker.length > 0),
+    [watchlistItems]
+  );
+
+  const {
+    priceMap: latestPriceMap,
+    loading: priceLoading,
+    error: priceError,
+  } = useLatestStockPrices(watchlistTickers);
+
   const lastUpdatedText = meta.updatedAt ? formatTimestamp(meta.updatedAt) : "업데이트 정보 없음";
 
   const renderContent = () => {
     if (loading) {
       return (
         <div className="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
           {Array.from({ length: 6 }).map((_, index) => (
             <div
               key={`watchlist-skeleton-${index}`}
               className="animate-pulse rounded-2xl border border-amber-400/10 bg-black/30 p-6"
             >
               <div className="h-4 w-24 rounded bg-amber-500/20" />
               <div className="mt-4 h-6 w-48 rounded bg-white/10" />
               <div className="mt-2 h-4 w-32 rounded bg-white/5" />
               <div className="mt-6 h-3 w-full rounded bg-white/5" />
               <div className="mt-2 h-3 w-3/4 rounded bg-white/5" />
               <div className="mt-6 h-3 w-2/3 rounded bg-white/5" />
             </div>
           ))}
         </div>
       );
     }
 
     if (error) {
       return (
         <div className="rounded-2xl border border-red-500/40 bg-red-500/10 p-6 text-center text-sm text-red-200">
           {error}
         </div>
       );
     }
 
     if (watchlistItems.length === 0) {
       return (
         <div className="rounded-2xl border border-dashed border-amber-400/40 bg-black/30 p-8 text-center text-sm text-amber-100">
           아직 공개된 관심 종목이 없습니다. 관리자 페이지에서 종목을 등록하면 이곳에서 자동으로 표시됩니다.
         </div>
       );
     }
 
     return (
       <div className="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
         {watchlistItems.map((item) => {
           const supportText = formatPriceLines(item.supportLines) ?? "지지선 정보 없음";
           const resistanceText = formatPriceLines(item.resistanceLines);
           const updatedText = formatTimestamp(item.updatedAt || item.createdAt);
           const alertEnabled = item.alertEnabled !== false;
+          const tickerKey = (item.ticker ?? "").trim().toUpperCase();
+          const priceInfo =
+            tickerKey && latestPriceMap instanceof Map ? latestPriceMap.get(tickerKey) ?? null : null;
+          const formattedPrice = priceInfo ? formatPriceValue(priceInfo.price) : null;
+          const priceDisplayText = priceInfo && formattedPrice
+            ? formattedPrice
+            : priceLoading
+            ? "가격 불러오는 중..."
+            : priceError
+            ? "가격 정보를 불러오지 못했습니다."
+            : "가격 정보 없음";
+          const priceTimestampText = priceInfo?.priceDate
+            ? formatPriceTimestamp(priceInfo.priceDate)
+            : null;
 
           return (
             <article
               key={item.id}
               className="relative flex h-full flex-col gap-4 overflow-hidden rounded-2xl border border-amber-400/20 bg-black/40 p-6 shadow-xl transition hover:border-amber-300/40 hover:bg-black/50"
             >
               <div className="absolute -right-10 top-0 h-28 w-28 rounded-full bg-amber-500/10 blur-3xl" aria-hidden />
               <div className="relative flex flex-col gap-2">
                 <div className="flex items-start justify-between gap-3">
                   <div>
                     <span className="inline-flex items-center gap-2 rounded-full bg-amber-500/15 px-3 py-1 text-xs font-semibold text-amber-200">
                       <i className="fas fa-star" aria-hidden />
                       관심 종목
                     </span>
                     <h3 className="mt-3 text-xl font-semibold text-white">{item.name}</h3>
                   </div>
                   {item.ticker && (
                     <span className="rounded-full border border-amber-400/30 bg-amber-500/10 px-3 py-1 text-xs font-semibold text-amber-100">
                       {item.ticker}
                     </span>
                   )}
                 </div>
                 {updatedText && (
                   <p className="text-xs text-amber-100/80">업데이트: {updatedText}</p>
                 )}
+                <div className="flex flex-wrap items-center gap-2 text-sm text-amber-100/90">
+                  <span className="font-semibold text-amber-200">현재가</span>
+                  <span>{priceDisplayText}</span>
+                  {priceTimestampText && (
+                    <span className="text-xs text-amber-200/80">기준: {priceTimestampText}</span>
+                  )}
+                </div>
+                {!priceInfo && priceError && !priceLoading && (
+                  <p className="text-xs text-red-200/80">{priceError}</p>
+                )}
                 {item.memo && <p className="text-sm text-amber-100/90">{item.memo}</p>}
               </div>
 
               <div className="relative space-y-2 rounded-xl border border-amber-400/20 bg-amber-500/5 p-4 text-sm text-amber-100">
                 <p>
                   <span className="font-semibold text-amber-200">지지선</span>
                   <span className="ml-2 text-amber-100/90">{supportText}</span>
                 </p>
                 <p>
                   <span className="font-semibold text-amber-200">저항선</span>
                   <span className="ml-2 text-amber-100/90">{resistanceText ?? "저항선 정보 없음"}</span>
                 </p>
                 <p className="text-xs text-amber-200/80">
                   알림 상태: {alertEnabled ? "활성화" : "비활성화"}
                   {alertEnabled && (
                     <span className="ml-1">
                       (임계값 {item.alertThresholdPercent ?? "-"}% · 쿨다운 {item.alertCooldownHours ?? "-"}시간)
                     </span>
                   )}
                 </p>
               </div>
 
               <div className="relative mt-auto flex flex-wrap items-center gap-3 text-xs text-amber-100/80">
                 <span className="rounded-full bg-white/5 px-3 py-1">
                   {item.portfolioReady ? "포트폴리오 연동 완료" : "포트폴리오 연동 준비 중"}
diff --git a/src/pages/ThemeRankHistoryPage.jsx b/src/pages/ThemeRankHistoryPage.jsx
index 8415c60c98a9d85ab8b3a2819431bc9be059034c..229246d13fb80e614c53bbfc88da7d87b2824bf7 100644
--- a/src/pages/ThemeRankHistoryPage.jsx
+++ b/src/pages/ThemeRankHistoryPage.jsx
@@ -49,51 +49,51 @@ const formatPercent = (value) => {
   }
 
   return "-";
 };
 
 const calculateAverage = (values) => {
   const numeric = values.filter((value) => typeof value === "number" && Number.isFinite(value));
   if (numeric.length === 0) {
     return null;
   }
 
   const sum = numeric.reduce((acc, current) => acc + current, 0);
   return sum / numeric.length;
 };
 
 export default function ThemeRankHistoryPage() {
   const [rangeKey, setRangeKey] = useState("all");
   const [topCount, setTopCount] = useState(10);
 
   const {
     groupedSnapshots,
     rankSeries,
     isLoading,
     errorMessage,
     totalSnapshots,
-  } = useThemeLeadersHistory({ limitCount: undefined, topCount: 30, chartCount: 30 });
+  } = useThemeLeadersHistory({ limitCount: null, topCount: 30, chartCount: 30 });
 
   const coverage = useMemo(() => {
     if (!Array.isArray(groupedSnapshots) || groupedSnapshots.length === 0) {
       return {
         startDate: "-",
         endDate: "-",
         totalDays: 0,
         uniqueThemes: 0,
       };
     }
 
     const latestGroup = groupedSnapshots[0];
     const earliestGroup = groupedSnapshots[groupedSnapshots.length - 1];
     const themeIds = new Set();
 
     rankSeries.forEach((entry) => {
       if (entry?.themeId) {
         themeIds.add(entry.themeId);
       }
     });
 
     return {
       startDate: earliestGroup?.displayDate ?? "-",
       endDate: latestGroup?.displayDate ?? "-",
       totalDays: groupedSnapshots.length,
 
EOF
)